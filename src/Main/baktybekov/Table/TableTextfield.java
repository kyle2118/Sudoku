package Main.baktybekov.Table;import javafx.geometry.Pos;import javafx.scene.control.TextField;import javafx.scene.text.Font;import javafx.scene.text.FontWeight;import java.util.Random;public class TableTextfield extends TableAbstract {    /////////////////////////////////////////////////////////////////////////////    /////     Properties                                                ////////    ///////////////////////////////////////////////////////////////////////////    private static final int CELLSIZE = 40;         // Any cell's size: height: 20px; width: 20px    private static int cellPositionX = 20;        // Window's sizes: windowHeight, windowWidth.    private static int cellPositionY = 20;        // (20;20) - point of the beginning of the textFields    private TextField [][] textFields;    /////////////////////////////////////////////////////////////////////////////    /////     Constructor                                                ///////    ///////////////////////////////////////////////////////////////////////////    public TableTextfield(int difficulty) {        super(difficulty);        createTextFields();        deleteNumbers();    }    /////////////////////////////////////////////////////////////////////////////    /////     Methods                                                   ////////    ///////////////////////////////////////////////////////////////////////////    private void createTextFields() {        textFields = new TextField[SIZE][SIZE];        for (int i = 0; i < SIZE; i++) {            cellPositionX = 20;            for (int j = 0; j < SIZE; j++) {                /*                 *  Setting the default text field                 */                textFields[i][j] = new TextField(super.getCell(i, j) + "");                textFields[i][j].setTranslateX(cellPositionX);                textFields[i][j].setTranslateY(cellPositionY);                textFields[i][j].setAlignment(Pos.CENTER);                textFields[i][j].setMinSize(CELLSIZE, CELLSIZE);                textFields[i][j].setMaxSize(CELLSIZE, CELLSIZE);                textFields[i][j].setEditable(false);                textFields[i][j].setFont(Font.font("Verdana", FontWeight.BOLD, 20));                textFields[i][j].setStyle("-fx-border-color: #000000;");                /*                    Some text fields are filled by another color as a background.                 */                if ( (i / (SIZE / 3) != 1 && j / (SIZE / 3) != 1) ||                     (j / (SIZE / 3) == 1 && i / (SIZE / 3) == 1) )                    textFields[i][j].setStyle("-fx-border-color: #000000;" +                                              "-fx-background-color: #E8E8E8;");//                textFields[i][j].lengthProperty().addListener(new ChangeListener<Number>() {//                    @Override//                    public void changed(ObservableValue<? extends Number> observable, Number oldValue, Number newValue) {//                        if (newValue.intValue() > 9)//                            ((TextField)observable).setText(oldValue + "");//                    }//                });//                textFields[i][j].textProperty().addListener((observable, oldValue, newValue) -> {////                });//                textFields[i][j].textProperty().addListener(new ChangeListener<String>() {//                    @Override//                    public void changed(ObservableValue<? extends String> observable, String oldValue, String newValue) {//                        if ()//                    }//                });//                textFields[i][j].textProperty().addListener((observable, oldValue, newValue) -> {//                    if (Integer.parseInt(newValue) > 9) ((TextField)observable).setText(oldValue);//                    if (oldValue.length() > 1) ((TextField)observable).setText(oldValue);//                });                cellPositionX += 40;            }            cellPositionY += 40;        }    }    public void deleteNumbers() {        Random random = new Random();        int num1, num2;        for (int i = 0; i < difficulty; i++) {            num1 = random.nextInt(7) + 1;            num2 = random.nextInt(7) + 1;            textFields[num1][num2].setText("");            textFields[num1][num2].setEditable(true);            textFields[num1][num2].setStyle(textFields[num1][num2].getStyle() + "-fx-text-inner-color: #0A15AA;");        }    }    public TextField getTextField(int i, int j) { return textFields[i][j]; }    public void setTextFields(int i, int j, int value) { textFields[i][j].setText(value + ""); }    public int getCell(int i, int j) { return super.getCell(i,j); }}